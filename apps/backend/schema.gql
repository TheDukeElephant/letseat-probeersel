# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BatchUpdateMenuItemInput {
  id: ID!
  isEnabled: Boolean
  sortOrder: Float
}

input BatchUpdateMenuItemsInput {
  items: [BatchUpdateMenuItemInput!]!
}

input CreateGroupInput {
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  iban: String
  name: String!
  vatNumber: String
}

input CreateMenuCategoryInput {
  menuId: ID!
  name: String!
}

input CreateMenuInput {
  description: String
  isActive: Boolean
  name: String!
  restaurantId: ID!
}

input CreateMenuItemInput {
  allergyTags: [String!]
  categoryId: ID!
  description: String
  imageUrl: String
  name: String!
  price: Float!
  stock: Float
}

input CreateOrderInput {
  deliveryAddressLine: String!
  deliveryCity: String!
  deliveryLat: Float
  deliveryLng: Float
  deliveryPostalCode: String!
  groupId: String!
  restaurantId: String!
  scheduledFor: DateTime
  specialInstructions: String
  userId: String!
}

input CreateRestaurantInput {
  address: String!
  adminUserIds: [String!]
  allergyTags: [String!]
  avgPrepTimeMins: Float
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  cuisine: CuisineType
  deliveryRadiusKm: Float
  description: String
  email: String!
  heroImageUrl: String
  iban: String
  isFeatured: Boolean
  lat: Float
  lng: Float
  logoUrl: String
  minOrderAmount: Float
  name: String!
  phone: String
  serviceFeePercent: Float
  slug: String!
  vatNumber: String
  websiteUrl: String
}

input CreateUserInput {
  email: String!
  groupIds: [String!]
  name: String!
  password: String!
  phone: String
  role: Role
}

enum CuisineType {
  BURGER
  CHINESE
  DESSERT
  HEALTHY
  INDIAN
  MEDITERRANEAN
  MEXICAN
  PIZZA
  SUSHI
  THAI
  UNSPECIFIED
  VEGAN
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupModel {
  adminCount: Float!
  admins: [UserModel!]
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  createdAt: DateTime!
  iban: String
  id: ID!
  name: String!
  userCount: Float!
  users: [UserModel!]
  vatNumber: String
}

type MenuCategoryModel {
  id: ID!
  items: [MenuItemModel!]
  menuId: String!
  name: String!
  sortOrder: Float!
}

type MenuItemModel {
  allergyTags: [String!]!
  categoryId: String!
  createdAt: DateTime!
  description: String
  id: ID!
  imageUrl: String
  isEnabled: Boolean!
  name: String!
  price: Float!
  sortOrder: Float!
  stock: Float
  updatedAt: DateTime!
}

type MenuModel {
  categories: [MenuCategoryModel!]
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  restaurantId: String!
  updatedAt: DateTime!
}

type Mutation {
  addGroupAdmin(groupId: String!, userId: String!): GroupModel!
  addOrderItem(comment: String, menuItemId: String!, orderId: String!, quantity: Float!, userId: String!): OrderItemModel!
  addRestaurantAdmin(restaurantId: String!, userId: String!): Boolean!
  addUserToGroup(groupId: String!, userId: String!): GroupModel!
  batchUpdateMenuItems(data: BatchUpdateMenuItemsInput!): Boolean!
  changeOrderStatus(orderId: String!, status: String!): OrderModel!
  createGroup(input: CreateGroupInput!): GroupModel!
  createMenu(data: CreateMenuInput!): MenuModel!
  createMenuCategory(data: CreateMenuCategoryInput!): MenuCategoryModel!
  createMenuItem(data: CreateMenuItemInput!): MenuItemModel!
  createOrder(input: CreateOrderInput!): OrderModel!
  createRestaurant(data: CreateRestaurantInput!): RestaurantModel!
  createUser(data: CreateUserInput!): UserModel!
  deleteGroup(id: String!): Boolean!
  deleteMenu(id: ID!): Boolean!
  deleteMenuCategory(id: ID!): Boolean!
  deleteMenuItem(id: ID!): Boolean!
  deleteRestaurant(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  enforceGroupAdminInvariants: Float!
  finalizeOrder(orderId: String!, userId: String!): OrderModel!
  removeGroupAdmin(groupId: String!, userId: String!): GroupModel!
  removeOrderItem(orderItemId: String!, userId: String!): Boolean!
  removeRestaurantAdmin(restaurantId: String!, userId: String!): Boolean!
  removeUserFromGroup(groupId: String!, userId: String!): GroupModel!
  updateGroup(id: String!, input: UpdateGroupInput!): GroupModel!
  updateMenu(data: UpdateMenuInput!): MenuModel!
  updateMenuCategory(data: UpdateMenuCategoryInput!): MenuCategoryModel!
  updateMenuItem(data: UpdateMenuItemInput!): MenuItemModel!
  updateOrderItemQuantity(orderItemId: String!, quantity: Float!, userId: String!): OrderModel!
  updateRestaurant(data: UpdateRestaurantInput!): RestaurantModel!
  updateUser(data: UpdateUserInput!): UserModel!
}

type OrderItemModel {
  addedByUserId: String!
  comment: String
  id: ID!
  menuItemId: String!
  orderId: String!
  price: String!
  quantity: Float!
}

type OrderModel {
  couponCode: String
  createdAt: DateTime!
  currency: String!
  deliveryAddressLine: String!
  deliveryCity: String!
  deliveryFee: String!
  deliveryLat: Float
  deliveryLng: Float
  deliveryPostalCode: String!
  discountTotal: String!
  finalizedAt: DateTime
  grandTotal: String!
  group: GroupModel
  groupId: String!
  id: ID!
  isFinalized: Boolean!
  items: [OrderItemModel!]
  restaurantId: String!
  scheduledFor: DateTime
  serviceFee: String!
  specialInstructions: String
  status: OrderStatus!
  subtotal: String!
  taxAmount: String!
  tipAmount: String!
  updatedAt: DateTime!
  userId: String!
}

enum OrderStatus {
  ACCEPTED
  CANCELLED
  COMPLETED
  IN_PROGRESS
  PENDING
  REJECTED
}

type Query {
  group(id: String!): GroupModel
  groups: [GroupModel!]!
  groupsSearch(q: String!): [GroupModel!]!
  menusByRestaurant(restaurantId: ID!): [MenuModel!]!
  order(id: String!): OrderModel
  ordersAll: [OrderModel!]!
  restaurant(id: String!): RestaurantModel
  restaurants: [RestaurantModel!]!
  user(id: String!): UserModel
  users: [UserModel!]!
}

type RestaurantModel {
  address: String!
  admins: [UserModel!]
  allergyTags: [String!]!
  avgPrepTimeMins: Float
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  createdAt: DateTime!
  cuisine: CuisineType
  deliveryRadiusKm: Float
  description: String
  email: String!
  heroImageUrl: String
  iban: String
  id: ID!
  isActive: Boolean!
  isFeatured: Boolean!
  lat: Float
  lng: Float
  logoUrl: String
  minOrderAmount: Float
  name: String!
  phone: String
  ratingAverage: Float
  ratingCount: Float!
  serviceFeePercent: Float
  slug: String!
  updatedAt: DateTime!
  vatNumber: String
  websiteUrl: String
}

enum Role {
  ADMIN
  RESTAURANT
  USER
}

input UpdateGroupInput {
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  iban: String
  name: String
  vatNumber: String
}

input UpdateMenuCategoryInput {
  id: ID!
  menuId: ID
  name: String
  sortOrder: Float
}

input UpdateMenuInput {
  description: String
  id: ID!
  isActive: Boolean
  name: String
  restaurantId: ID
}

input UpdateMenuItemInput {
  allergyTags: [String!]
  categoryId: ID
  description: String
  id: ID!
  imageUrl: String
  isEnabled: Boolean
  name: String
  price: Float
  stock: Float
}

input UpdateRestaurantInput {
  address: String
  adminUserIds: [String!]
  allergyTags: [String!]
  avgPrepTimeMins: Float
  bic: String
  billingAddress: String
  billingCity: String
  billingCountry: String
  billingEmail: String
  billingName: String
  billingPostalCode: String
  companyNumber: String
  cuisine: CuisineType
  deliveryRadiusKm: Float
  description: String
  email: String
  heroImageUrl: String
  iban: String
  id: ID!
  isActive: Boolean
  isFeatured: Boolean
  lat: Float
  lng: Float
  logoUrl: String
  minOrderAmount: Float
  name: String
  phone: String
  serviceFeePercent: Float
  slug: String
  vatNumber: String
  websiteUrl: String
}

input UpdateUserInput {
  email: String
  groupIds: [String!]
  id: String!
  name: String
  password: String
  phone: String
  role: Role
}

type UserModel {
  adminRestaurants: [RestaurantModel!]
  createdAt: DateTime!
  email: String!
  groups: [GroupModel!]
  id: ID!
  name: String!
  phone: String
  role: Role!
  updatedAt: DateTime!
}