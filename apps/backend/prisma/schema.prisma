// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Using default output so we can import from '@prisma/client' without fragile relative paths.
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/* -------------------------------------------------- *
 * ENUMS
 * -------------------------------------------------- */

enum Role {
  USER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS   // being prepared / on the way
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  QUEUED       // waiting for driver assignment
  ASSIGNED
  PICKED_UP
  DELIVERED
  CANCELLED
}

// High-level cuisine categorization for discovery & filtering.
enum CuisineType {
  UNSPECIFIED
  BURGER
  PIZZA
  SUSHI
  INDIAN
  CHINESE
  THAI
  MEXICAN
  MEDITERRANEAN
  DESSERT
  VEGAN
  HEALTHY
}

/* -------------------------------------------------- *
 * CORE MODELS
 * -------------------------------------------------- */

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    Group[]        // user is a member of groups
  groupAdminOf GroupAdmin[] @relation("UserGroupAdmin")
  restaurantAdmins RestaurantAdmin[]

  // relations
  orders    Order[]
  addresses Address[]
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique          // e.g. “sushi-spot”
  email       String   @unique
  phone       String?
  description String?
  allergyTags String[] @default([])      // Aggregated allergy tags present across menus (editable)
  address     String                    // human-readable address
  lat         Decimal?                  // PostGIS POINT (stored as decimal here)
  lng         Decimal?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Branding / media
  logoUrl       String?
  heroImageUrl  String?

  // Classification & discovery
  cuisine       CuisineType? @default(UNSPECIFIED)
  isFeatured    Boolean      @default(false) // promotes in listings

  // Operational metadata
  minOrderAmount    Decimal?   // Minimum order value in platform currency
  deliveryRadiusKm  Int?       // Service radius in km
  avgPrepTimeMins   Int?       // Average preparation time

  // Commercial / financial
  serviceFeePercent Decimal?   // Platform service fee override
  vatNumber         String?    @unique @db.VarChar(64)
  // Invoice / payout details (nullable; collected during onboarding)
  billingName        String?
  billingEmail       String?
  billingAddress     String?
  billingPostalCode  String?
  billingCity        String?
  billingCountry     String?   @default("NL")
  companyNumber      String?   @db.VarChar(64) // e.g. KVK
  iban               String?   @db.VarChar(64)
  bic                String?   @db.VarChar(32)

  // Aggregated ratings (denormalized for quick reads)
  ratingAverage     Decimal?   // e.g. 4.6 (store as numeric, compute externally)
  ratingCount       Int        @default(0)

  // Optional external link
  websiteUrl        String?

  // relations
  menus       Menu[]
  orders      Order[]
  addresses   Address[]
  admins      RestaurantAdmin[]

  @@index([isActive])
  @@index([cuisine])
  @@index([isFeatured])
}

model RestaurantAdmin {
  id           String   @id @default(cuid())
  restaurantId String
  userId       String
  createdAt    DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([restaurantId, userId])
  @@index([userId])
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String?  @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  deliveries Delivery[]
}

model Group {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users     User[]
  admins    GroupAdmin[] @relation("GroupAdmins")
  // Optional invoice / billing details
  billingName       String? 
  billingEmail      String? 
  billingAddress    String? 
  billingPostalCode String? 
  billingCity       String? 
  billingCountry    String? 
  vatNumber         String? 
  companyNumber     String? 
  iban              String? 
  bic               String?
}

model GroupAdmin {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], name: "UserGroupAdmin")
  group     Group    @relation(fields: [groupId], references: [id], name: "GroupAdmins")

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

/* -------------------------------------------------- *
 * CATALOG
 * -------------------------------------------------- */

model Menu {
  id           String   @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  categories   MenuCategory[]
}

model MenuCategory {
  id        String   @id @default(cuid())
  menuId    String
  name      String
  sortOrder Int      @default(0)

  menu      Menu      @relation(fields: [menuId], references: [id])
  items     MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  isEnabled   Boolean  @default(true)
  stock       Int?
  allergyTags String[] @default([])   // e.g. ["NUTS","DAIRY"]
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    MenuCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

/* -------------------------------------------------- *
 * ORDER FLOW
 * -------------------------------------------------- */

model Order {
  id              String        @id @default(cuid())
  userId          String
  restaurantId    String
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal
  currency        String        @default("EUR")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // snapshot of delivery address (keeps history even if user edits address later)
  deliveryAddressLine String
  deliveryPostalCode  String
  deliveryCity        String
  deliveryLat         Decimal?
  deliveryLng         Decimal?

  // relations
  user        User        @relation(fields: [userId], references: [id])
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  items       OrderItem[]
  payment     Payment?
  delivery    Delivery?
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  menuItemId  String
  quantity    Int
  price       Decimal   // price at time of purchase

  order       Order     @relation(fields: [orderId], references: [id])
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])

  @@index([orderId])
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String        @unique
  provider          String        // "adyen", "mollie", ...
  providerPaymentId String
  status            PaymentStatus @default(PENDING)
  amount            Decimal
  currency          String
  paidAt            DateTime?

  order             Order         @relation(fields: [orderId], references: [id])
}

model Delivery {
  id            String         @id @default(cuid())
  orderId       String         @unique
  driverId      String?
  status        DeliveryStatus @default(QUEUED)
  estimatedAt   DateTime?
  pickedUpAt    DateTime?
  deliveredAt   DateTime?

  order         Order   @relation(fields: [orderId], references: [id])
  driver        Driver? @relation(fields: [driverId], references: [id])
}

/* -------------------------------------------------- *
 * ADDRESSES (optional multi-address support)
 * -------------------------------------------------- */

model Address {
  id            String   @id @default(cuid())
  userId        String?
  restaurantId  String?
  label         String?          // "Home", "Kitchen", etc.
  street        String
  houseNumber   String
  postalCode    String
  city          String
  country       String  @default("NL")
  lat           Decimal?
  lng           Decimal?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User?       @relation(fields: [userId], references: [id])
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id])

  @@index([userId])
  @@index([restaurantId])
}
